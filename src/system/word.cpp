module;

#include <cstdint>

#include <xieite/architecture.hpp>

export module xieite:system.Word;

export namespace xieite::system {
#if XIEITE_ARCHITECTURE_TYPE_AARCH64 || XIEITE_ARCHITECTURE_TYPE_ALPHA || XIEITE_ARCHITECTURE_TYPE_CONVEX || XIEITE_ARCHITECTURE_TYPE_EPIPHANY || XIEITE_ARCHITECTURE_TYPE_ITANIUM || XIEITE_ARCHITECTURE_VERSION_LEAST(POWERPC, 620, 0, 0) || XIEITE_ARCHITECTURE_VERSION_LEAST(SPARC, 9, 0, 0) || XIEITE_ARCHITECTURE_TYPE_X86_64 || XIEITE_ARCHITECTURE_TYPE_Z
    using Word = std::uint_least64_t;
#elif XIEITE_ARCHITECTURE_TYPE_ARM || XIEITE_ARCHITECTURE_TYPE_MIPS || XIEITE_ARCHITECTURE_TYPE_MOTOROLA_68000 || XIEITE_ARCHITECTURE_TYPE_PA_RISC || XIEITE_ARCHITECTURE_TYPE_PYRAMID_9810 || XIEITE_ARCHITECTURE_TYPE_RS_6000 || XIEITE_ARCHITECTURE_VERSION_MOST(SPARC, 8, 0, 0) || XIEITE_ARCHITECTURE_TYPE_SUPERH || XIEITE_ARCHITECTURE_VERSION_LEAST(TMS320, 5400, 0, 0) || XIEITE_ARCHITECTURE_TYPE_TMS470 || XIEITE_ARCHITECTURE_TYPE_X86_32
    using Word = std::uint_least32_t;
#elif XIEITE_ARCHITECTURE_TYPE_BLACKFIN || XIEITE_ARCHITECTURE_VERSION_MOST(TMS320, 2800, 0, 0)
    using Word = std::uint_least16_t;
#else
    using Word = std::size_t;
#endif
}
